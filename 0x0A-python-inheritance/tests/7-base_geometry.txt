import module
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

=======================
test cases
=======================
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 12, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", "5")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: Esla must be an integer

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", 5)

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", -5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: Esla must be greater than 0

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: Esla must be greater than 0

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", 0, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: Esla must be an integer

>>> bg.integer_validator("Esla", (1, 2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: Esla must be an integer

>>> bg.integer_validator("Esla", [1, 2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: Esla must be an integer


>>> bg = BaseGeometry()
>>> bg.integer_validator("Esla", {1:2})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: Esla must be an integer
